#include<stdio.h>
#include<stdlib.h>
#include<string.h>                                 // for string handling
#include<time.h>                                   //for timestamp
#include<openssl/crypto.h>                         //for hashing
#include<openssl/sha.h>                            //for value of SHA256_DIGEST_LENGTH
#include<unistd.h>                                //for sleep function
#include<pthread.h>                               //for multithreading

struct block{
unsigned char prevHash[SHA256_DIGEST_LENGTH];
int timestamp;
int blockheight;
int blockData[150];
struct block *link;
};

struct block *head=NULL;           //pointer to first block
int height=0;                      //for height of block
char temp[150];                    // for storing temporary data
 
void takeInput();                  //prototype function for taking input
void printMenu();                  //prototype function for printing menu
void addBlock();                   //prototype function for adding block 
void printAllBlocks();             //prototype function for printing all blocks
unsigned char* toString(struct block);
void *takinginputs(void *value);
void *blockchaincreation(void *value);

int main(){
pthread_t th1,th2;                   //created two threads
printf("Command Menu:\n");
printf("add:add a new block\n");
printf("print:print all blocks\n");
printf("\n Blockchain started!!!\n");

//taking input in thread 1(th1)
pthread_create(&th1,NULL,takinginputs,NULL);

while(1){
//creating blocks in thread 2(th2)
pthread_create(&th2,NULL,blockchaincreation,NULL);
pthread_join(th2,NULL);
}
pthread_join(th1,NULL);
return 0;
}

//taking input commands in 1st thread
void *takinginputs(void *value){
char input[10];
while(1){
scanf("%s",input);
if(strcmp(input,"add",3)==0)
takeinput();
else if(strcmp(input,"print",5)==0)
printAllBlocks();
else
printf("Enter a valid option!!!\n");
}
}
 //creating blockchain in 2nd thread
void *blockchaincreation(void *value){
sleep(20.0);
addBlock();
printf("\n Blockchain created at height%d\n\n",height);
height++;
pthread_exit(0);
}

// accepting name and balance and storing in temp
void takeInput(){
    char name[30], balance[8], finalString[60], n[]={'\n','\0'};
    printf("Enter name: ");
    scanf(" %s", name);
    printf("Enter balance: ");
    scanf(" %s", balance);
    printf("\n");
    char info1[] = {'N','a','m','e',':',' ','\0'};
    char info2[] = {'\n','B','a','l','a','n','c','e',':',' ','\0'};
    strcat(info1, name);
    strcat(info2, balance);
    strcat(info2, n);
    strcat(info1, info2);
    strcat(temp, info1);
}
 // adding data to new block
 void addBlock(){
    if(head == NULL){
    head=malloc(sizeof(struct block));
    SHA256("", sizeof(""), head->prevHash);
    strcat(head->blockData, temp);
    head->timestamp = (int)time(NULL);
    head->blockHeight = heaight;
    temp[0] = '\0';
    return;
 }
 struct block *currentBlock = head;
 while(currentBlock->link){
    currentBlock = currentBlock->link;
 }
    struct block *newBlock = malloc(sizeof(struct block));
    currentBlock->link = newBlock;
    strcat(newBlock->blockData, temp);
    newBlock->timestamp = (int)time(NULL);
    newBlock->blockHeight = height;
    temp[0] = '\0';
    SHA256(toString(*currentBlock), sizeof(*currentBlock), newBlock->prevHash);
 }
 unsigned char* toString(struct block b){
    unsigned char *str = malloc(sizeof(unsigned char)*sizeof(b));
    memcpy(str, &b, sizeof(b));
    return str;
 }
 //Printing contents of one block
 void printBlock(struct block *b){
    printf("%p\t",b);
    printf("\n[\n PrevHash: ");
    printf("\nTimestamp: %d", b->timeStamp);
    printf("\nHeight: %d", b->blockHeight);
    printf("\n%s]\t", b->blockData);
    printf("%p\n\n", b->link);
 }
 // Printing contents of all the blocks
 void printAllBlocks(){
   struct block *curr = head;
   int count = 0;
   while(curr){
      printBlock(curr);
      curr = curr->link;
   }
 }
 //Printing Menu
 void printMenu(){
    printf("\nCommand Menu: \n");
    printf("add : add a new block \n");
    printf("print : print all blocks\n");
    printf("menu : view all commands\n");
 }

